"use client";
import React, { useState, useEffect, useMemo } from "react";
import {
    redditAPI,
    type Subreddit,
    type Flair,
    type SubredditRule,
    type PostRequirement,
} from "@/lib/reddit-api";
import Fuse from "fuse.js";

export default function HomePage() {
    const [subreddit, setSubreddit] = useState("");
    const [title, setTitle] = useState("");
    const [flair, setFlair] = useState("");
    const [body, setBody] = useState("");
    const [subreddits, setSubreddits] = useState<Subreddit[]>([]);
    const [allSubreddits, setAllSubreddits] = useState<Subreddit[]>([]);
    const [flairs, setFlairs] = useState<Flair[]>([]);
    const [rules, setRules] = useState<SubredditRule[]>([]);
    const [postRequirements, setPostRequirements] =
        useState<PostRequirement | null>(null);
    const [loadingSubreddits, setLoadingSubreddits] = useState(true);
    const [loadingFlairs, setLoadingFlairs] = useState(false);
    const [loadingRules, setLoadingRules] = useState(false);
    const [loadingRequirements, setLoadingRequirements] = useState(false);
    const [loadingSearch, setLoadingSearch] = useState(false);
    const [error, setError] = useState<string>("");
    const [searchQuery, setSearchQuery] = useState("");
    const [isDropdownOpen, setIsDropdownOpen] = useState(false);
    const [selectedIndex, setSelectedIndex] = useState(-1);
    const [showPricingModal, setShowPricingModal] = useState(false);
    const [isFirstPost, setIsFirstPost] = useState(true);
    const [validationErrors, setValidationErrors] = useState<string[]>([]);
    const [aiOutput, setAiOutput] = useState<string>("");
    const [isGeneratingAI, setIsGeneratingAI] = useState(false);

    // Fuzzy search configuration
    const fuse = useMemo(() => {
        const combinedSubreddits = [...allSubreddits, ...subreddits];
        const uniqueSubreddits = combinedSubreddits.filter(
            (subreddit, index, self) =>
                index === self.findIndex((s) => s.id === subreddit.id),
        );

        const sortedSubreddits = uniqueSubreddits.sort((a, b) =>
            a.display_name
                .toLowerCase()
                .localeCompare(b.display_name.toLowerCase()),
        );

        return new Fuse(sortedSubreddits, {
            keys: ["display_name", "public_description"],
            threshold: 0.4,
            includeScore: true,
        });
    }, [allSubreddits, subreddits]);

    const filteredSubreddits = useMemo(() => {
        if (!searchQuery.trim()) {
            const combinedSubreddits = [...allSubreddits, ...subreddits];
            const uniqueSubreddits = combinedSubreddits.filter(
                (subreddit, index, self) =>
                    index === self.findIndex((s) => s.id === subreddit.id),
            );

            return uniqueSubreddits.sort((a, b) =>
                a.display_name
                    .toLowerCase()
                    .localeCompare(b.display_name.toLowerCase()),
            );
        }

        return fuse.search(searchQuery).map((result) => result.item);
    }, [fuse, searchQuery, allSubreddits, subreddits]);

    useEffect(() => {
        fetchSubreddits();
    }, []);

    // Auto-generate AI output when content changes
    useEffect(() => {
        if (
            title.trim() &&
            subreddit.trim() &&
            (rules.length > 0 || postRequirements)
        ) {
            const timeoutId = setTimeout(() => {
                generateAIOptimizedPost();
            }, 1000);

            return () => clearTimeout(timeoutId);
        } else {
            setAiOutput("");
        }
    }, [title, body, subreddit, rules, postRequirements, flair]);

    const fetchSubreddits = async () => {
        try {
            setLoadingSubreddits(true);
            setError("");
            const data = await redditAPI.fetchSubreddits(100);
            setAllSubreddits(data);
        } catch (err) {
            console.error("Error fetching subreddits:", err);
            setError(
                `Failed to fetch subreddits: ${
                    err instanceof Error ? err.message : "Unknown error"
                }`,
            );

            // Fallback subreddits
            const fallbackSubreddits: Subreddit[] = [
                {
                    id: "1",
                    display_name: "AskReddit",
                    public_description:
                        "Ask and answer thought-provoking questions",
                    subscribers: 40000000,
                },
                {
                    id: "2",
                    display_name: "funny",
                    public_description: "Welcome to r/Funny",
                    subscribers: 50000000,
                },
                {
                    id: "3",
                    display_name: "science",
                    public_description:
                        "This community is a place to share and discuss new scientific research",
                    subscribers: 28000000,
                },
                {
                    id: "4",
                    display_name: "technology",
                    public_description:
                        "Subreddit dedicated to the news and discussions about the creation and use of technology",
                    subscribers: 14000000,
                },
                {
                    id: "5",
                    display_name: "gaming",
                    public_description:
                        "A subreddit for (almost) anything related to games",
                    subscribers: 37000000,
                },
                {
                    id: "6",
                    display_name: "buildapc",
                    public_description:
                        "Planning on building a computer but need some advice?",
                    subscribers: 5000000,
                },
            ];
            setAllSubreddits(fallbackSubreddits);
        } finally {
            setLoadingSubreddits(false);
        }
    };

    const handleSubredditChange = async (selectedSubreddit: string) => {
        setSubreddit(selectedSubreddit);
        setFlair("");
        setSearchQuery(selectedSubreddit);
        setIsDropdownOpen(false);
        setRules([]);
        setPostRequirements(null);

        if (selectedSubreddit) {
            try {
                setLoadingFlairs(true);
                setLoadingRules(true);
                setLoadingRequirements(true);

                const [flairData, rulesData, requirementsData] =
                    await Promise.all([
                        redditAPI
                            .fetchSubredditFlairs(selectedSubreddit)
                            .catch(() => []),
                        redditAPI
                            .fetchSubredditRules(selectedSubreddit)
                            .catch(() => []),
                        redditAPI
                            .fetchPostRequirements(selectedSubreddit)
                            .catch(() => null),
                    ]);

                setFlairs(flairData);
                setRules(rulesData);
                setPostRequirements(requirementsData);
            } catch (err) {
                console.error(
                    `Failed to fetch data for ${selectedSubreddit}:`,
                    err,
                );
                setFlairs([]);
                setRules([]);
                setPostRequirements(null);
            } finally {
                setLoadingFlairs(false);
                setLoadingRules(false);
                setLoadingRequirements(false);
            }
        }
    };

    const handleSearchChange = async (value: string) => {
        setSearchQuery(value);
        setSubreddit(value);
        setIsDropdownOpen(true);
        setSelectedIndex(-1);

        const combinedSubreddits = [...allSubreddits, ...subreddits];
        const exactMatch = combinedSubreddits.find(
            (sr) => sr.display_name.toLowerCase() === value.toLowerCase(),
        );

        if (exactMatch && value.length > 0) {
            handleSubredditChange(exactMatch.display_name);
        } else {
            setFlairs([]);
            if (value.length >= 3 && !loadingSearch) {
                try {
                    setLoadingSearch(true);
                    const searchResults = await redditAPI.searchSubreddits(
                        value,
                        20,
                    );
                    setSubreddits(searchResults);
                } catch (err) {
                    console.error("Error searching subreddits:", err);
                } finally {
                    setLoadingSearch(false);
                }
            } else if (value.length < 3) {
                setSubreddits([]);
            }
        }
    };

    const handleKeyDown = (e: React.KeyboardEvent) => {
        if (!isDropdownOpen) return;

        switch (e.key) {
            case "ArrowDown":
                e.preventDefault();
                setSelectedIndex((prev) =>
                    prev < filteredSubreddits.length - 1 ? prev + 1 : prev,
                );
                break;
            case "ArrowUp":
                e.preventDefault();
                setSelectedIndex((prev) => (prev > 0 ? prev - 1 : -1));
                break;
            case "Enter":
                e.preventDefault();
                if (selectedIndex >= 0 && filteredSubreddits[selectedIndex]) {
                    handleSubredditChange(
                        filteredSubreddits[selectedIndex].display_name,
                    );
                }
                break;
            case "Escape":
                setIsDropdownOpen(false);
                setSelectedIndex(-1);
                break;
        }
    };

    const generateAIOptimizedPost = async () => {
        if (!title.trim() || !subreddit.trim()) return;

        setIsGeneratingAI(true);

        try {
            await new Promise((resolve) => setTimeout(resolve, 2000));

            let optimizedTitle = title;
            let optimizedBody = body;

            const hasFlairRequirement = postRequirements?.is_flair_required;

            if (title.length < 10) {
                optimizedTitle = `[${
                    flair || "Help"
                }] ${title} - Need advice from r/${subreddit} community`;
            }

            if (body.length < 50) {
                optimizedBody = `${body}\n\nAdditional context: I'm posting this in r/${subreddit} and would appreciate any insights from the community. ${
                    hasFlairRequirement
                        ? `I've selected the "${flair}" flair as required.`
                        : ""
                }\n\nThanks in advance for your help!`;
            }

            const aiSuggestions = `**AI-Optimized Post for r/${subreddit}**

**Optimized Title:**
${optimizedTitle}

**Optimized Body:**
${optimizedBody}

**AI Analysis:**
✅ Title length: ${optimizedTitle.length} characters (${
                postRequirements?.title_text_min_length
                    ? `min: ${postRequirements.title_text_min_length}`
                    : "no min requirement"
            })
${
    hasFlairRequirement
        ? "✅ Flair requirement satisfied"
        : "• No flair requirement"
}
${
    rules.length > 0
        ? `✅ Checked against ${rules.length} subreddit rules`
        : "• No specific rules found"
}

**Compliance Check:**
${rules
    .slice(0, 3)
    .map((rule, i) => `• Rule ${i + 1}: ${rule.short_name} - ✅ Compliant`)
    .join("\n")}

**Engagement Tips:**
• Added community-specific language
• Included appreciation for responses
• ${
                hasFlairRequirement
                    ? "Flair selection helps with discoverability"
                    : "Consider adding relevant keywords"
            }
• Post timing: Consider posting during peak hours for r/${subreddit}`;

            setAiOutput(aiSuggestions);
        } catch (error) {
            setAiOutput("AI optimization failed. Please try again.");
        } finally {
            setIsGeneratingAI(false);
        }
    };

    const validateForm = (): string[] => {
        const errors: string[] = [];

        if (!title.trim()) errors.push("Title is required");
        if (!subreddit.trim()) errors.push("Subreddit is required");

        if (
            postRequirements?.title_text_min_length &&
            title.length < postRequirements.title_text_min_length
        ) {
            errors.push(
                `Title must be at least ${postRequirements.title_text_min_length} characters`,
            );
        }

        if (
            postRequirements?.title_text_max_length &&
            title.length > postRequirements.title_text_max_length
        ) {
            errors.push(
                `Title must be no more than ${postRequirements.title_text_max_length} characters`,
            );
        }

        const combinedSubreddits = [...allSubreddits, ...subreddits];
        const subredditExists = combinedSubreddits.find(
            (sr) => sr.display_name.toLowerCase() === subreddit.toLowerCase(),
        );

        if (subreddit.trim() && !subredditExists) {
            errors.push("Please select a valid subreddit from the dropdown");
        }

        if (postRequirements?.is_flair_required && !flair) {
            errors.push("Flair is required for this subreddit");
        }

        return errors;
    };

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        const errors = validateForm();
        setValidationErrors(errors);
        if (errors.length === 0) {
            setShowPricingModal(true);
        }
    };

    const handleConfirmPost = () => {
        setShowPricingModal(false);
        alert(
            `Post "${title}" would be submitted to r/${subreddit}${
                isFirstPost ? " (FREE)" : " ($4.99)"
            }`,
        );
        setIsFirstPost(false);
        setTitle("");
        setBody("");
        setFlair("");
        setSubreddit("");
        setSearchQuery("");
        setValidationErrors([]);
    };

    return (
        <div className="min-h-screen bg-gradient-to-br from-white to-neutral-100 dark:from-neutral-950 dark:to-neutral-900 py-6 px-4">
            <div className="max-w-7xl mx-auto">
                <h1 className="text-3xl font-bold mb-8 text-neutral-900 dark:text-white text-center">
                    Reddit Post Creator
                </h1>

                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                    {/* Left Column - Rules & Requirements */}
                    <div className="lg:col-span-1">
                        <div className="bg-white dark:bg-neutral-950 rounded-2xl shadow-lg p-6 border border-neutral-200 dark:border-neutral-800 sticky top-6 h-[70vh]">
                            {subreddit ? (
                                <>
                                    <h2 className="text-xl font-semibold text-neutral-900 dark:text-white flex items-center mb-4">
                                        r/{subreddit} Guidelines
                                        {(loadingRules ||
                                            loadingRequirements) && (
                                            <div className="ml-2 animate-spin rounded-full h-4 w-4 border-2 border-[#FF4500] border-t-transparent"></div>
                                        )}
                                    </h2>

                                    <div className="space-y-4 max-h-[calc(70vh-8rem)] overflow-y-auto">
                                        {/* Post Requirements */}
                                        {loadingRequirements ? (
                                            <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700 rounded-lg p-4">
                                                <div className="animate-pulse">
                                                    <div className="h-5 bg-blue-200 dark:bg-blue-700 rounded w-1/3 mb-3"></div>
                                                    <div className="space-y-2">
                                                        <div className="h-4 bg-blue-200 dark:bg-blue-700 rounded w-3/4"></div>
                                                        <div className="h-4 bg-blue-200 dark:bg-blue-700 rounded w-2/3"></div>
                                                    </div>
                                                </div>
                                            </div>
                                        ) : (
                                            postRequirements && (
                                                <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700 rounded-lg p-4">
                                                    <h3 className="font-semibold text-blue-900 dark:text-blue-100 mb-3 flex items-center text-sm">
                                                        <svg
                                                            className="w-4 h-4 mr-2"
                                                            fill="currentColor"
                                                            viewBox="0 0 20 20"
                                                        >
                                                            <path
                                                                fillRule="evenodd"
                                                                d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                                                                clipRule="evenodd"
                                                            />
                                                        </svg>
                                                        Post Requirements
                                                    </h3>
                                                    <div className="space-y-1 text-xs">
                                                        {postRequirements.is_flair_required && (
                                                            <div className="flex items-center text-blue-800 dark:text-blue-200">
                                                                <span className="w-1.5 h-1.5 bg-blue-500 rounded-full mr-2"></span>
                                                                Flair is required for posts
                                                            </div>
                                                        )}
                                                        {postRequirements.title_text_min_length > 1 && (
                                                            <div className="flex items-center text-blue-800 dark:text-blue-200">
                                                                <span className="w-1.5 h-1.5 bg-blue-500 rounded-full mr-2"></span>
                                                                Title min: {postRequirements.title_text_min_length} chars
                                                            </div>
                                                        )}
                                                        {postRequirements.title_text_max_length < 300 && (
                                                            <div className="flex items-center text-blue-800 dark:text-blue-200">
                                                                <span className="w-1.5 h-1.5 bg-blue-500 rounded-full mr-2"></span>
                                                                Title max: {postRequirements.title_text_max_length} chars
                                                            </div>
                                                        )}
                                                    </div>
                                                </div>
                                            )
                                        )}

                                        {/* Subreddit Rules */}
                                        {loadingRules ? (
                                            <div className="bg-orange-50 dark:bg-orange-900/20 border border-orange-200 dark:border-orange-700 rounded-lg p-4">
                                                <div className="animate-pulse">
                                                    <div className="h-5 bg-orange-200 dark:bg-orange-700 rounded w-1/3 mb-3"></div>
                                                    <div className="space-y-2">
                                                        {[1, 2, 3].map((i) => (
                                                            <div key={i} className="h-3 bg-orange-200 dark:bg-orange-700 rounded w-full"></div>
                                                        ))}
                                                    </div>
                                                </div>
                                            </div>
                                        ) : (
                                            rules.length > 0 && (
                                                <div className="bg-orange-50 dark:bg-orange-900/20 border border-orange-200 dark:border-orange-700 rounded-lg p-4">
                                                    <h3 className="font-semibold text-orange-900 dark:text-orange-100 mb-3 flex items-center text-sm">
                                                        <svg
                                                            className="w-4 h-4 mr-2"
                                                            fill="currentColor"
                                                            viewBox="0 0 20 20"
                                                        >
                                                            <path
                                                                fillRule="evenodd"
                                                                d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                                                                clipRule="evenodd"
                                                            />
                                                        </svg>
                                                        Subreddit Rules
                                                    </h3>
                                                    <div className="space-y-2">
                                                        {rules.map((rule, index) => (
                                                            <div key={index} className="border-l-3 border-orange-400 pl-2">
                                                                <div className="font-medium text-orange-900 dark:text-orange-100 text-xs">
                                                                    {index + 1}. {rule.short_name}
                                                                </div>
                                                                {rule.description && (
                                                                    <div className="text-xs text-orange-800 dark:text-orange-200 mt-1 line-clamp-2">
                                                                        {rule.description}
                                                                    </div>
                                                                )}
                                                            </div>
                                                        ))}
                                                    </div>
                                                </div>
                                            )
                                        )}

                                        {/* No rules message */}
                                        {!loadingRules && !loadingRequirements && rules.length === 0 && !postRequirements && (
                                            <div className="bg-neutral-50 dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-700 rounded-lg p-4 text-center">
                                                <div className="text-neutral-600 dark:text-neutral-400">
                                                    <svg
                                                        className="w-6 h-6 mx-auto mb-2 text-neutral-400"
                                                        fill="none"
                                                        stroke="currentColor"
                                                        viewBox="0 0 24 24"
                                                    >
                                                        <path
                                                            strokeLinecap="round"
                                                            strokeLinejoin="round"
                                                            strokeWidth={2}
                                                            d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                                                        />
                                                    </svg>
                                                    <p className="text-xs">No specific rules found</p>
                                                    <p className="text-xs text-neutral-500 mt-1">Follow general Reddit guidelines</p>
                                                </div>
                                            </div>
                                        )}
                                    </div>
                                </>
                            ) : (
                                <>
                                    <h2 className="text-xl font-semibold text-neutral-900 dark:text-white flex items-center mb-4">
                                        Guidelines
                                    </h2>
                                    <div className="text-center text-neutral-500 dark:text-neutral-400 py-16">
                                        <svg
                                            className="w-16 h-16 mx-auto mb-4 text-neutral-300 dark:text-neutral-600"
                                            fill="none"
                                            stroke="currentColor"
                                            viewBox="0 0 24 24"
                                        >
                                            <path
                                                strokeLinecap="round"
                                                strokeLinejoin="round"
                                                strokeWidth={2}
                                                d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                                            />
                                        </svg>
                                        <p className="text-lg font-medium mb-2">Select a Subreddit</p>
                                        <p className="text-sm">Rules and requirements will appear here</p>
                                    </div>
                                </>
                            )}
                        </div>
                                        {/* Post Requirements */}
                                        {loadingRequirements ? (
                                            <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700 rounded-lg p-4">
                                                <div className="animate-pulse">
                                                    <div className="h-5 bg-blue-200 dark:bg-blue-700 rounded w-1/3 mb-3"></div>
                                                    <div className="space-y-2">
                                                        <div className="h-4 bg-blue-200 dark:bg-blue-700 rounded w-3/4"></div>
                                                        <div className="h-4 bg-blue-200 dark:bg-blue-700 rounded w-2/3"></div>
                                                    </div>
                                                </div>
                                            </div>
                                        ) : (
                                            postRequirements && (
                                                <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700 rounded-lg p-4">
                                                    <h3 className="font-semibold text-blue-900 dark:text-blue-100 mb-3 flex items-center text-sm">
                                                        <svg
                                                            className="w-4 h-4 mr-2"
                                                            fill="currentColor"
                                                            viewBox="0 0 20 20"
                                                        >
                                                            <path
                                                                fillRule="evenodd"
                                                                d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                                                                clipRule="evenodd"
                                                            />
                                                        </svg>
                                                        Post Requirements
                                                    </h3>
                                                    <div className="space-y-1 text-xs">
                                                        {postRequirements.is_flair_required && (
                                                            <div className="flex items-center text-blue-800 dark:text-blue-200">
                                                                <span className="w-1.5 h-1.5 bg-blue-500 rounded-full mr-2"></span>
                                                                Flair is
                                                                required for
                                                                posts
                                                            </div>
                                                        )}
                                                        {postRequirements.title_text_min_length >
                                                            1 && (
                                                            <div className="flex items-center text-blue-800 dark:text-blue-200">
                                                                <span className="w-1.5 h-1.5 bg-blue-500 rounded-full mr-2"></span>
                                                                Title min:{" "}
                                                                {
                                                                    postRequirements.title_text_min_length
                                                                }{" "}
                                                                chars
                                                            </div>
                                                        )}
                                                        {postRequirements.title_text_max_length <
                                                            300 && (
                                                            <div className="flex items-center text-blue-800 dark:text-blue-200">
                                                                <span className="w-1.5 h-1.5 bg-blue-500 rounded-full mr-2"></span>
                                                                Title max:{" "}
                                                                {
                                                                    postRequirements.title_text_max_length
                                                                }{" "}
                                                                chars
                                                            </div>
                                                        )}
                                                    </div>
                                                </div>
                                            )
                                        )}

                                        {/* Subreddit Rules */}
                                        {loadingRules ? (
                                            <div className="bg-orange-50 dark:bg-orange-900/20 border border-orange-200 dark:border-orange-700 rounded-lg p-4">
                                                <div className="animate-pulse">
                                                    <div className="h-5 bg-orange-200 dark:bg-orange-700 rounded w-1/3 mb-3"></div>
                                                    <div className="space-y-2">
                                                        {[1, 2, 3].map((i) => (
                                                            <div
                                                                key={i}
                                                                className="h-3 bg-orange-200 dark:bg-orange-700 rounded w-full"
                                                            ></div>
                                                        ))}
                                                    </div>
                                                </div>
                                            </div>
                                        ) : (
                                            rules.length > 0 && (
                                                <div className="bg-orange-50 dark:bg-orange-900/20 border border-orange-200 dark:border-orange-700 rounded-lg p-4">
                                                    <h3 className="font-semibold text-orange-900 dark:text-orange-100 mb-3 flex items-center text-sm">
                                                        <svg
                                                            className="w-4 h-4 mr-2"
                                                            fill="currentColor"
                                                            viewBox="0 0 20 20"
                                                        >
                                                            <path
                                                                fillRule="evenodd"
                                                                d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                                                                clipRule="evenodd"
                                                            />
                                                        </svg>
                                                        Subreddit Rules
                                                    </h3>
                                                    <div className="space-y-2">
                                                        {rules.map(
                                                            (rule, index) => (
                                                                <div
                                                                    key={index}
                                                                    className="border-l-3 border-orange-400 pl-2"
                                                                >
                                                                    <div className="font-medium text-orange-900 dark:text-orange-100 text-xs">
                                                                        {index +
                                                                            1}
                                                                        .{" "}
                                                                        {
                                                                            rule.short_name
                                                                        }
                                                                    </div>
                                                                    {rule.description && (
                                                                        <div className="text-xs text-orange-800 dark:text-orange-200 mt-1 line-clamp-2">
                                                                            {
                                                                                rule.description
                                                                            }
                                                                        </div>
                                                                    )}
                                                                </div>
                                                            ),
                                                        )}
                                                    </div>
                                                </div>
                                            )
                                        )}

                                        {/* No rules message */}
                                        {!loadingRules &&
                                            !loadingRequirements &&
                                            rules.length === 0 &&
                                            !postRequirements && (
                                                <div className="bg-neutral-50 dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-700 rounded-lg p-4 text-center">
                                                    <div className="text-neutral-600 dark:text-neutral-400">
                                                        <svg
                                                            className="w-6 h-6 mx-auto mb-2 text-neutral-400"
                                                            fill="none"
                                                            stroke="currentColor"
                                                            viewBox="0 0 24 24"
                                                        >
                                                            <path
                                                                strokeLinecap="round"
                                                                strokeLinejoin="round"
                                                                strokeWidth={2}
                                                                d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                                                            />
                                                        </svg>
                                                        <p className="text-xs">
                                                            No specific rules
                                                            found
                                                        </p>
                                                        <p className="text-xs text-neutral-500 mt-1">
                                                            Follow general
                                                            Reddit guidelines
                                                        </p>
                                                    </div>
                                                </div>
                                            )}
                                    </div>
                                </div>
                    </div>

                    {/* Center Column - Post Creation Form */}
                    <div className="lg:col-span-1">
                        <div className="bg-white dark:bg-neutral-950 rounded-2xl shadow-lg p-6 border border-neutral-200 dark:border-neutral-800 h-[70vh] flex flex-col">
                            <h2 className="text-2xl font-bold mb-6 text-neutral-900 dark:text-white text-center">
                                Create a Post
                            </h2>

                            {error && (
                                <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4 text-sm">
                                    {error}
                                </div>
                            )}

                            {validationErrors.length > 0 && (
                                <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                                    <h4 className="font-semibold mb-2 text-sm">
                                        Please fix the following errors:
                                    </h4>
                                    <ul className="list-disc list-inside space-y-1 text-xs">
                                        {validationErrors.map(
                                            (error, index) => (
                                                <li key={index}>{error}</li>
                                            ),
                                        )}
                                    </ul>
                                </div>
                            )}

                            <form
                                className="space-y-4 flex-1 overflow-y-auto"
                                onSubmit={handleSubmit}
                            >
                                {/* Subreddit Selection */}
                                <div className="relative">
                                    <label className="block text-sm font-semibold mb-2 text-neutral-700 dark:text-neutral-200">
                                        Subreddit
                                    </label>
                                    <div className="relative">
                                        <input
                                            type="text"
                                            className="w-full rounded-lg border border-neutral-300 dark:border-neutral-700 bg-neutral-50 dark:bg-neutral-900 px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-[#FF4500] pr-10"
                                            placeholder={
                                                loadingSubreddits
                                                    ? "Loading..."
                                                    : "Search subreddit..."
                                            }
                                            value={searchQuery}
                                            onChange={(e) =>
                                                handleSearchChange(
                                                    e.target.value,
                                                )
                                            }
                                            onFocus={() =>
                                                setIsDropdownOpen(true)
                                            }
                                            onKeyDown={handleKeyDown}
                                            disabled={loadingSubreddits}
                                            autoComplete="off"
                                        />
                                        <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                                            {loadingSubreddits ||
                                            loadingSearch ? (
                                                <div className="animate-spin rounded-full h-4 w-4 border-2 border-[#FF4500] border-t-transparent"></div>
                                            ) : (
                                                <svg
                                                    className="h-4 w-4 text-neutral-400"
                                                    fill="none"
                                                    stroke="currentColor"
                                                    viewBox="0 0 24 24"
                                                >
                                                    <path
                                                        strokeLinecap="round"
                                                        strokeLinejoin="round"
                                                        strokeWidth={2}
                                                        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                                                    />
                                                </svg>
                                            )}
                                        </div>
                                    </div>

                                    {/* Dropdown */}
                                    {isDropdownOpen && (
                                        <div className="absolute z-10 w-full mt-1 bg-white dark:bg-neutral-900 border border-neutral-300 dark:border-neutral-700 rounded-lg shadow-lg max-h-48 overflow-y-auto">
                                            {loadingSubreddits ||
                                            loadingSearch ? (
                                                <div className="px-4 py-4 flex items-center justify-center">
                                                    <div className="flex items-center space-x-2">
                                                        <div className="animate-spin rounded-full h-3 w-3 border-2 border-[#FF4500] border-t-transparent"></div>
                                                        <span className="text-neutral-500 dark:text-neutral-400 text-xs">
                                                            {loadingSubreddits
                                                                ? "Loading..."
                                                                : "Searching..."}
                                                        </span>
                                                    </div>
                                                </div>
                                            ) : filteredSubreddits.length >
                                              0 ? (
                                                filteredSubreddits
                                                    .slice(0, 10)
                                                    .map((sr, index) => (
                                                        <button
                                                            key={sr.id}
                                                            type="button"
                                                            className={`w-full text-left px-3 py-2 border-b border-neutral-200 dark:border-neutral-700 last:border-b-0 focus:outline-none transition-colors text-xs ${
                                                                index ===
                                                                selectedIndex
                                                                    ? "bg-[#FF4500] text-white"
                                                                    : "hover:bg-neutral-100 dark:hover:bg-neutral-800"
                                                            }`}
                                                            onClick={() =>
                                                                handleSubredditChange(
                                                                    sr.display_name,
                                                                )
                                                            }
                                                            onMouseEnter={() =>
                                                                setSelectedIndex(
                                                                    index,
                                                                )
                                                            }
                                                        >
                                                            <div
                                                                className={`font-medium ${
                                                                    index ===
                                                                    selectedIndex
                                                                        ? "text-white"
                                                                        : "text-neutral-900 dark:text-white"
                                                                }`}
                                                            >
                                                                r/
                                                                {
                                                                    sr.display_name
                                                                }
                                                            </div>
                                                            <div
                                                                className={`truncate ${
                                                                    index ===
                                                                    selectedIndex
                                                                        ? "text-orange-100"
                                                                        : "text-neutral-600 dark:text-neutral-400"
                                                                }`}
                                                            >
                                                                {
                                                                    sr.public_description
                                                                }
                                                            </div>
                                                        </button>
                                                    ))
                                            ) : (
                                                <div className="px-4 py-4 text-center text-neutral-500 text-xs">
                                                    {searchQuery.length >= 3
                                                        ? `No subreddits found for "${searchQuery}"`
                                                        : "Type at least 3 characters to search"}
                                                </div>
                                            )}
                                        </div>
                                    )}

                                    {isDropdownOpen && (
                                        <div
                                            className="fixed inset-0 z-0"
                                            onClick={() =>
                                                setIsDropdownOpen(false)
                                            }
                                        />
                                    )}
                                </div>

                                {/* Title */}
                                <div>
                                    <label className="block text-sm font-semibold mb-2 text-neutral-700 dark:text-neutral-200">
                                        Title
                                    </label>
                                    <input
                                        type="text"
                                        className="w-full rounded-lg border border-neutral-300 dark:border-neutral-700 bg-neutral-50 dark:bg-neutral-900 px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-[#FF4500]"
                                        placeholder="Title your post"
                                        maxLength={300}
                                        value={title}
                                        onChange={(e) =>
                                            setTitle(e.target.value)
                                        }
                                    />
                                    <div className="text-xs text-neutral-500 mt-1 text-right">
                                        {title.length}/300
                                    </div>
                                </div>

                                {/* Flair */}
                                <div>
                                    <label className="block text-sm font-semibold mb-2 text-neutral-700 dark:text-neutral-200">
                                        Flair{" "}
                                        {postRequirements?.is_flair_required && (
                                            <span className="text-red-500">
                                                *
                                            </span>
                                        )}
                                        {loadingFlairs && (
                                            <span className="ml-2 inline-flex items-center">
                                                <div className="animate-spin rounded-full h-3 w-3 border-2 border-[#FF4500] border-t-transparent"></div>
                                            </span>
                                        )}
                                    </label>
                                    <select
                                        className="w-full rounded-lg border border-neutral-300 dark:border-neutral-700 bg-neutral-50 dark:bg-neutral-900 px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-[#FF4500]"
                                        value={flair}
                                        onChange={(e) =>
                                            setFlair(e.target.value)
                                        }
                                        disabled={loadingFlairs || !subreddit}
                                    >
                                        <option value="">
                                            {loadingFlairs
                                                ? "Loading flairs..."
                                                : subreddit
                                                ? "No flair"
                                                : "Select a subreddit first"}
                                        </option>
                                        {flairs.map((f) => (
                                            <option key={f.id} value={f.text}>
                                                {f.text}
                                            </option>
                                        ))}
                                    </select>
                                </div>

                                {/* Body */}
                                <div>
                                    <label className="block text-sm font-semibold mb-2 text-neutral-700 dark:text-neutral-200">
                                        Body
                                    </label>
                                    <textarea
                                        className="w-full rounded-lg border border-neutral-300 dark:border-neutral-700 bg-neutral-50 dark:bg-neutral-900 px-4 py-2 text-sm min-h-[100px] focus:outline-none focus:ring-2 focus:ring-[#FF4500] resize-vertical"
                                        placeholder="Write your post here..."
                                        value={body}
                                        onChange={(e) =>
                                            setBody(e.target.value)
                                        }
                                    />
                                </div>

                                {/* Submit Button */}
                                <button
                                    type="submit"
                                    className="w-full py-3 rounded-lg font-semibold bg-[#FF4500] text-white text-sm shadow-lg hover:bg-[#e03d00] transition"
                                >
                                    {isGeneratingAI
                                        ? "Generating AI Optimization..."
                                        : "Submit Post"}
                                </button>
                            </form>
                        </div>
                    </div>

                    {/* Right Column - AI Output */}
                    <div className="lg:col-span-1">
                        <div className="bg-white dark:bg-neutral-950 rounded-2xl shadow-lg p-6 border border-neutral-200 dark:border-neutral-800 sticky top-6 h-[70vh]">
                            <h2 className="text-xl font-semibold text-neutral-900 dark:text-white flex items-center mb-4">
                                <svg
                                    className="w-5 h-5 mr-2 text-[#FF4500]"
                                    fill="currentColor"
                                    viewBox="0 0 20 20"
                                >
                                    <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                AI Optimization
                                {isGeneratingAI && (
                                    <div className="ml-2 animate-spin rounded-full h-4 w-4 border-2 border-[#FF4500] border-t-transparent"></div>
                                )}
                            </h2>

                            <div className="max-h-[calc(70vh-8rem)] overflow-y-auto">
                                {isGeneratingAI ? (
                                    <div className="space-y-3">
                                        <div className="animate-pulse">
                                            <div className="h-4 bg-neutral-200 dark:bg-neutral-600 rounded w-3/4 mb-2"></div>
                                            <div className="h-4 bg-neutral-200 dark:bg-neutral-600 rounded w-1/2 mb-2"></div>
                                            <div className="h-20 bg-neutral-200 dark:bg-neutral-600 rounded mb-3"></div>
                                            <div className="h-4 bg-neutral-200 dark:bg-neutral-600 rounded w-2/3"></div>
                                        </div>
                                        <p className="text-sm text-neutral-500 text-center">
                                            Generating AI optimization...
                                        </p>
                                    </div>
                                ) : aiOutput ? (
                                    <div className="prose prose-sm dark:prose-invert max-w-none">
                                        <div className="whitespace-pre-wrap text-xs text-neutral-700 dark:text-neutral-300">
                                            {aiOutput}
                                        </div>
                                    </div>
                                ) : (
                                    <div className="text-center text-neutral-500 dark:text-neutral-400 py-8">
                                        <svg
                                            className="w-12 h-12 mx-auto mb-3 text-neutral-300 dark:text-neutral-600"
                                            fill="none"
                                            stroke="currentColor"
                                            viewBox="0 0 24 24"
                                        >
                                            <path
                                                strokeLinecap="round"
                                                strokeLinejoin="round"
                                                strokeWidth={2}
                                                d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"
                                            />
                                        </svg>
                                        <p className="text-sm">
                                            Enter a title and select a subreddit
                                        </p>
                                        <p className="text-xs text-neutral-400 mt-1">
                                            AI will optimize your post
                                            automatically
                                        </p>
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            {/* Pricing Modal */}
            {showPricingModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                    <div className="bg-white dark:bg-neutral-900 rounded-2xl p-8 max-w-md w-full border border-neutral-200 dark:border-neutral-700 shadow-xl">
                        <div className="text-center">
                            <div className="mb-6">
                                <div className="w-16 h-16 bg-[#FF4500] rounded-full flex items-center justify-center mx-auto mb-4">
                                    <svg
                                        className="w-8 h-8 text-white"
                                        fill="currentColor"
                                        viewBox="0 0 20 20"
                                    >
                                        <path
                                            fillRule="evenodd"
                                            d="M4 4a2 2 0 00-2 2v4a2 2 0 002 2V6h10a2 2 0 00-2-2H4zm2 6a2 2 0 012-2h8a2 2 0 012 2v4a2 2 0 01-2 2H8a2 2 0 01-2-2v-4zm6 4a2 2 0 100-4 2 2 0 000 4z"
                                            clipRule="evenodd"
                                        />
                                    </svg>
                                </div>
                                <h2 className="text-2xl font-bold text-neutral-900 dark:text-white mb-2">
                                    Confirm Your Post
                                </h2>
                                <p className="text-neutral-600 dark:text-neutral-400">
                                    Ready to submit your post to r/{subreddit}?
                                </p>
                            </div>

                            <div className="bg-neutral-50 dark:bg-neutral-800 rounded-xl p-6 mb-6">
                                <div className="text-center">
                                    {isFirstPost ? (
                                        <>
                                            <div className="text-3xl font-bold text-green-600 dark:text-green-400 mb-2">
                                                FREE
                                            </div>
                                            <p className="text-sm text-neutral-600 dark:text-neutral-400">
                                                🎉 Your first post is on us!
                                            </p>
                                            <p className="text-xs text-neutral-500 dark:text-neutral-500 mt-2">
                                                Future posts: $4.99 each
                                            </p>
                                        </>
                                    ) : (
                                        <>
                                            <div className="text-3xl font-bold text-[#FF4500] mb-2">
                                                $4.99
                                            </div>
                                            <p className="text-sm text-neutral-600 dark:text-neutral-400">
                                                Per post submission
                                            </p>
                                            <p className="text-xs text-neutral-500 dark:text-neutral-500 mt-2">
                                                Includes AI optimization & rule
                                                checking
                                            </p>
                                        </>
                                    )}
                                </div>
                            </div>

                            <div className="flex space-x-3">
                                <button
                                    onClick={() => setShowPricingModal(false)}
                                    className="flex-1 py-3 px-4 rounded-lg font-semibold bg-neutral-200 dark:bg-neutral-700 text-neutral-800 dark:text-neutral-200 hover:bg-neutral-300 dark:hover:bg-neutral-600 transition"
                                >
                                    Cancel
                                </button>
                                <button
                                    onClick={handleConfirmPost}
                                    className="flex-1 py-3 px-4 rounded-lg font-semibold bg-[#FF4500] text-white hover:bg-[#e03d00] transition"
                                >
                                    {isFirstPost
                                        ? "Post for Free!"
                                        : "Pay & Post"}
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}
